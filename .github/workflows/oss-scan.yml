name: OSS Compliance Scan

on:
  workflow_dispatch:
    inputs:
      input_type:       # ⇦ user must choose
        description: "zip ➜ give a ZIP URL | docker ➜ give an image reference"
        type: choice
        options: ["zip", "docker"]
        default: "zip"
      zip_url:
        description: "HTTP(S) URL of the ZIP (required if input_type=zip)"
        required: false
      docker_image:
        description: "Image reference, e.g. ghcr.io/org/app:tag (required if input_type=docker)"
        required: false
      run_scout:
        description: "Run Docker Scout step as well?"
        type: boolean
        default: false

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      ZIP_PATH: input.zip
      IMG_NAME: scanned-image          # temp tag if we load a tarball
    steps:

    # ─────────────── 1. FETCH THE INPUT ───────────────
    - name: ⬇️  Download ZIP (when input_type=zip)
      if: ${{ github.event.inputs.input_type == 'zip' }}
      run: |
        curl -Lf "${{ github.event.inputs.zip_url }}" -o "$ZIP_PATH"
        unzip -q "$ZIP_PATH" -d extracted

    - name: 🐳 Pull image (when input_type=docker)
      if: ${{ github.event.inputs.input_type == 'docker' }}
      run: docker pull "${{ github.event.inputs.docker_image }}"

    - name: 🐳 Load *.tar inside ZIP as image (if present)
      if: |
        github.event.inputs.input_type == 'zip' &&
        (find extracted -name '*.tar' | grep -q .)
      run: |
        docker load -i $(find extracted -name '*.tar' | head -n1) \
        | awk '{print $3}' > image_id.txt
        docker tag $(cat image_id.txt) "$IMG_NAME:latest"

    # ─────────────── 2. DECIDE SCAN TARGET ───────────────
    - name: 📌 Set TARGET_* env vars
      run: |
        if [[ "${{ github.event.inputs.input_type }}" == "docker" ]]; then
          echo "TARGET_IMAGE=${{ github.event.inputs.docker_image }}" >> $GITHUB_ENV
        elif find extracted -name '*.tar' | grep -q .; then
          echo "TARGET_IMAGE=$IMG_NAME:latest" >> $GITHUB_ENV
        else
          echo "TARGET_DIR=$PWD/extracted" >> $GITHUB_ENV
        fi

    # ─────────────── 3. RUN SCANNERS ───────────────
    - name: 📝 Syft SBOM
      continue-on-error: true
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
        | sh -s -- -b /usr/local/bin
        if [[ -n "$TARGET_IMAGE" ]]; then
          syft "$TARGET_IMAGE" -o json > syft_output.json
        else
          syft "$TARGET_DIR" -o json > syft_output.json
        fi

    - name: 📝 Tern SBOM (Docker images only)
      if: ${{ env.TARGET_IMAGE != '' }}
      continue-on-error: true
      run: |
        sudo pip install --quiet tern
        tern report -i "$TARGET_IMAGE" -o tern_output.json

    - name: 📝 SCANOSS file-level scan
      continue-on-error: true
      run: |
        mkdir fsroot
        if [[ -n "$TARGET_IMAGE" ]]; then
          docker create --name tmp "$TARGET_IMAGE"
          docker cp tmp:/ fsroot/
          docker rm tmp
        else
          cp -r "$TARGET_DIR"/. fsroot/
        fi
        docker run --rm -v "$PWD/fsroot":/scan scanoss/scanoss-toolkit scan \
          -o scanoss_output.json /scan

    - name: 📝 Docker Scout (optional)
      if: ${{ github.event.inputs.run_scout == 'true' && env.TARGET_IMAGE != '' }}
      continue-on-error: true
      run: docker scout quickview "$TARGET_IMAGE" --output json > scout_output.json

    # ─────────────── 4. BUILD EXCEL SUMMARY ───────────────
    - name: 🗃️  Build Excel summary
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: 🗃️  JSON → Excel
      if: always()
      run: |
        python - <<'PY'
        import json, glob, pandas as pd, pathlib, sys
        outputs={}
        for f in glob.glob("*_output.json"):
            try:
                data=json.load(open(f, encoding="utf-8"))
                df=pd.json_normalize(data)
                outputs[f.replace("_output.json","")]=df
            except Exception as e:
                print(f"⚠️ Skipped {f}: {e}", file=sys.stderr)
        with pd.ExcelWriter("compliance_report.xlsx") as xl:
            for name,df in outputs.items():
                df.to_excel(xl, sheet_name=name[:31], index=False)
        PY

    # ─────────────── 5. PUBLISH ARTEFACTS ───────────────
    - name: 📤 Upload results
      uses: actions/upload-artifact@v4
      with:
        name: oss-scan-results
        path: |
          syft_output.json
          tern_output.json
          scanoss_output.json
          scout_output.json
          compliance_report.xlsx
        if-no-files-found: ignore
