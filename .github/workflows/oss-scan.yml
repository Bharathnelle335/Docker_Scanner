name: OSS Compliance Scan

on:
  workflow_dispatch:
    inputs:
      input_type:
        description: "zip → give ZIP URL • docker → give image reference"
        type: choice
        options: ["zip", "docker"]
        default: "zip"
      zip_url:
        description: "Public ZIP URL (required if input_type=zip)"
        required: false
      docker_image:
        description: "Image ref, e.g. ghcr.io/org/img:tag (required if input_type=docker)"
        required: false
      run_scout:
        description: "Also run Docker Scout?"
        type: boolean
        default: false

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      ZIP_PATH: input.zip
      IMG_NAME: loaded-image
    steps:

    - uses: actions/checkout@v4

    - name: ⬇️  Download ZIP
      if: ${{ github.event.inputs.input_type == 'zip' }}
      run: |
        curl -Lf "${{ github.event.inputs.zip_url }}" -o "$ZIP_PATH"
        unzip -q "$ZIP_PATH" -d extracted

    - name: 🐳 Pull image
      if: ${{ github.event.inputs.input_type == 'docker' }}
      run: docker pull "${{ github.event.inputs.docker_image }}"

    - name: 📌 Decide scan target
      id: target
      run: |
        echo "is_image=false"            >>"$GITHUB_OUTPUT"
        echo "target_dir=$PWD/extracted" >>"$GITHUB_OUTPUT"
        if [[ "${{ github.event.inputs.input_type }}" == "docker" ]]; then
          echo "is_image=true"                             >>"$GITHUB_OUTPUT"
          echo "target_image=${{ github.event.inputs.docker_image }}" >>"$GITHUB_OUTPUT"
        elif tarfile=$(find extracted -maxdepth 1 -name '*.tar' -print -quit); then
          docker load -i "$tarfile" | awk '{print $3}' >id.txt
          docker tag "$(cat id.txt)" "$IMG_NAME:latest"
          echo "is_image=true"            >>"$GITHUB_OUTPUT"
          echo "target_image=$IMG_NAME:latest" >>"$GITHUB_OUTPUT"
        fi

    - name: 📝 Install Syft
      continue-on-error: true
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh -o install_syft.sh
        bash install_syft.sh -b /usr/local/bin

    - name: 📝 Syft SBOM
      continue-on-error: true
      run: |
        if [[ "${{ steps.target.outputs.is_image }}" == "true" ]]; then
          syft "${{ steps.target.outputs.target_image }}" -o json > syft_output.json
        else
          syft "${{ steps.target.outputs.target_dir }}"   -o json > syft_output.json
        fi

    - name: 📝 Tern SBOM (images only)
      if: ${{ steps.target.outputs.is_image == 'true' }}
      continue-on-error: true
      run: |
        sudo pip install --quiet tern
        tern report -i "${{ steps.target.outputs.target_image }}" -o tern_output.json

    - name: 📝 SCANOSS file-level scan
      continue-on-error: true
      run: |
        mkdir fsroot
        if [[ "${{ steps.target.outputs.is_image }}" == "true" ]]; then
          docker create --name tmp "${{ steps.target.outputs.target_image }}"
          docker cp tmp:/ fsroot/
          docker rm  tmp
        else
          cp -r "${{ steps.target.outputs.target_dir }}/." fsroot/
        fi
        docker run --rm -v "$PWD/fsroot":/scan scanoss/scanoss-toolkit scan           -o scanoss_output.json /scan

    - name: 📝 Docker Scout (optional)
      if: ${{ steps.target.outputs.is_image == 'true' && github.event.inputs.run_scout == 'true' }}
      continue-on-error: true
      run: docker scout quickview "${{ steps.target.outputs.target_image }}"            --output json > scout_output.json

    - name: 🗃️  Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: 🗃️  Install Excel deps
      run: pip install --quiet pandas openpyxl

    - name: 🗃️  JSON → Excel
      if: always()
      run: |
        python - <<'PY'
        import json, glob, pandas as pd, sys
        sheets={}
        for f in glob.glob("*_output.json"):
            try:
                data=json.load(open(f, encoding="utf-8"))
                sheets[f.replace("_output.json","")] = pd.json_normalize(data)
            except Exception as e:
                print("⚠️  skipped", f, e, file=sys.stderr)
        if sheets:
            with pd.ExcelWriter("compliance_report.xlsx") as xl:
                for name,df in sheets.items():
                    df.to_excel(xl, sheet_name=name[:31], index=False)
        PY

    - name: 📤 Upload artefacts
      uses: actions/upload-artifact@v4
      with:
        name: oss-scan-results
        path: |
          syft_output.json
          tern_output.json
          scanoss_output.json
          scout_output.json
          compliance_report.xlsx
        if-no-files-found: ignore
