name: OSS Compliance – Syft | SCANOSS | ScanCode

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: "docker | git | upload-zip | upload-tar | local"
        required: true
        default: docker
        type: choice
        options: [docker, git, upload-zip, upload-tar, local]

      docker_image:
        description: "Docker image name (required when scan_type=docker)"
        required: false
      git_url:
        description: "Git repo URL (required when scan_type=git)"
        required: false

      enable_syft:
        type: boolean
        default: true
        description: "Run Syft SBOM?"
      enable_scanoss:
        type: boolean
        default: true
        description: "Run SCANOSS scan?"
      enable_scancode:
        type: boolean
        default: true
        description: "Run ScanCode Toolkit scan?"

jobs:
  compliance:
    runs-on: ubuntu-latest

    steps:
    # ───────────────── 0. Checkout ─────────────────
    - uses: actions/checkout@v4

    # ───────────────── 1. Toolchain ─────────────────
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install SCANOSS CLI, Syft, Excel libs
      run: |
        python -m pip install --upgrade pip
        python -m pip install --user scanoss pandas openpyxl
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | \
          sh -s -- -b /usr/local/bin

    # ─────────────── 2. Input handling ───────────────
    - name: Pull Docker image
      if: ${{ inputs.scan_type == 'docker' }}
      run: docker pull "${{ inputs.docker_image }}"

    - name: Save & extract Docker filesystem
      if: ${{ inputs.scan_type == 'docker' }}
      run: |
        mkdir -p docker-rootfs
        docker save "${{ inputs.docker_image }}" -o image.tar
        tar -xf image.tar
        find . -name 'layer.tar' -exec tar -xf {} -C docker-rootfs \;

    - name: Clone Git repository
      if: ${{ inputs.scan_type == 'git' }}
      run: git clone --depth 1 "${{ inputs.git_url }}" repo-src

    - name: Unzip uploaded ZIP
      if: ${{ inputs.scan_type == 'upload-zip' }}
      run: |
        mkdir zip-src
        unzip '*.zip' -d zip-src

    - name: Extract uploaded TAR / TAR.GZ
      if: ${{ inputs.scan_type == 'upload-tar' }}
      run: |
        mkdir tar-rootfs
        file=$(find . -maxdepth 1 -type f -iname "*.tar*" | head -n1)
        [ -z "$file" ] && { echo "❌ No .tar archive found."; exit 1; }
        tar -xf "$file" -C tar-rootfs

    # ─────────────── 3. SCANOSS CLI ───────────────
    - name: Run SCANOSS
      if: ${{ inputs.enable_scanoss }}
      run: |
        case "${{ inputs.scan_type }}" in
          docker)      SRC=docker-rootfs ;;
          upload-tar)  SRC=tar-rootfs    ;;
          upload-zip)  SRC=zip-src       ;;
          git)         SRC=repo-src      ;;
          local)       SRC=.             ;;
        esac
        python -m scanoss.cli scan -o scanoss.json "$SRC"

    # ─────────────── 4. Syft SBOM ───────────────
    - name: Run Syft
      if: ${{ inputs.enable_syft }}
      run: |
        OUT=syft.spdx.json
        case "${{ inputs.scan_type }}" in
          docker)      syft "${{ inputs.docker_image }}"        -o spdx-json > "$OUT" ;;
          upload-tar)  syft dir:tar-rootfs                      -o spdx-json > "$OUT" ;;
          upload-zip)  syft dir:zip-src                         -o spdx-json > "$OUT" ;;
          git)         syft dir:repo-src                        -o spdx-json > "$OUT" ;;
          local)       syft dir:.                               -o spdx-json > "$OUT" ;;
        esac

    # ─────────────── 5. ScanCode Toolkit ───────────────
    - name: Docker login (Docker Hub)           # requires DOCKERHUB_USER / DOCKERHUB_TOKEN secrets
      if: ${{ inputs.enable_scancode }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Run ScanCode Toolkit
      if: ${{ inputs.enable_scancode }}
      run: |
        case "${{ inputs.scan_type }}" in
          docker)      SRC=docker-rootfs ;;
          upload-tar)  SRC=tar-rootfs    ;;
          upload-zip)  SRC=zip-src       ;;
          git)         SRC=repo-src      ;;
          local)       SRC=.             ;;
        esac
        docker run --rm -v "$PWD/$SRC":/code -v "$PWD":/out \
          nexb/scancode-toolkit:latest \
          --json-pp /out/scancode.json /code

    # ─────────────── 6. Build Excel ───────────────
    - name: Build Excel summary
      run: |
        python - <<'PY'
        import json, glob, pandas as pd
        files = [f for f in glob.glob("*.json") if not f.endswith(".spdx.json")]
        if not files: exit()
        with pd.ExcelWriter("report.xlsx") as xl:
            for f in files:
                try:
                    df = pd.json_normalize(json.load(open(f)))
                    df.to_excel(xl, sheet_name=f.split('.')[0][:31], index=False)
                except Exception as e:
                    print("skip", f, e)
        PY

    # ─────────────── 7. Upload artefacts ───────────────
    - uses: actions/upload-artifact@v4
      with:
        name: oss-scan-results
        path: |
          scanoss.json
          scancode.json
          syft.spdx.json
          report.xlsx
        if-no-files-found: ignore
